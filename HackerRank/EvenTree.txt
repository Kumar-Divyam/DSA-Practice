bool checkedge(int p[], int edge, int n){
    int parent[n+1];
    for(int i=0; i<=n ; i++)
        parent[i]=p[i];
    
    parent[edge]=-1;
    queue<int> q;
    int cur,count;
    for(int i=1 ; i<=n ; i++){
        if(parent[i]==-1){
            q.push(i);
            count=1;
            while(!q.empty()){
                cur=q.front();
                q.pop();
                for(int j=1;j<=n;j++){
                    if(parent[j]==cur){
                        q.push(j);
                        count+=1;
                    }
                }
            }
            if(count%2 ==1)
                return false;
        }
    }
    return true;
}

int evenForest(int t_nodes, int t_edges, vector<int> t_from, vector<int> t_to) {
    int parent[t_edges+1]={-1};
    for(int i=0 ; i<t_from.size() ; i++){
        parent[t_from[i]]=t_to[i];
    }
    
    for(int i=1 ; i<t_edges+1 ; i++){
        if(parent[i]==-1)
            continue;
        if(checkedge(parent, i, t_nodes)==true){
            //cout<<i<<"\t"<<parent[i]<<endl;
            parent[i]=-1;
        }
    }
    int count=-1;
    for (int i=1;i<=t_nodes ; i++){
        if(parent[i]==-1)
            count++;
    }
    return count;
}