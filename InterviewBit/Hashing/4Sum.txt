vector<vector<int> > Solution::fourSum(vector<int> &A, int B) {
    
    vector<vector<int>> res;
    sort(A.begin(),A.end());
    int n=A.size();
    for(int i=0;i<n-3;i++){
        for(int j=i+1;j<n-2;j++){
            int l=j+1,r=n-1;
            while(l<r){
                if((A[i]+A[j]+A[l]+A[r])==B){
                    vector<int > t(4);
                    t[0]=A[i];t[1]=A[j];t[2]=A[l];t[3]=A[r];
                    res.push_back(t);
                    l++;r--;
                }
                else if((A[i]+A[j]+A[l]+A[r])>B)
                    r--;
                else
                    l++;
            }   
        }
    }
    sort(res.begin(),res.end());
    res.erase(unique(res.begin(), res.end()), res.end());
    return res;
}



/*
//optimised of above
vector<vector<int> > Solution::fourSum(vector<int> &nums, int target) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<vector<int>> total;
        int n = nums.size();
        if(n<4)  return total;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-3;i++)
        {
            if(i>0&&nums[i]==nums[i-1]) continue;
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;
            if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]<target) continue;
            for(int j=i+1;j<n-2;j++)
            {
                if(j>i+1&&nums[j]==nums[j-1]) continue;
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;
                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue;
                int left=j+1,right=n-1;
                while(left<right){
                    int sum=nums[left]+nums[right]+nums[i]+nums[j];
                    if(sum<target) left++;
                    else if(sum>target) right--;
                    else{
                        total.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        do{left++;}while(nums[left]==nums[left-1]&&left<right);
                        do{right--;}while(nums[right]==nums[right+1]&&left<right);
                    }
                }
            }
        }
        return total;
}

*/

/*
//method 2-> using maps

#define ft first
#define sc second

vector<vector<int> > Solution::fourSum(vector<int> &a, int B) {
    
    map<int,vector<pair<int,int>>> mp;
    vector<vector<int>> ans; 
    map<vector<int>,int> man;
    sort(a.begin(),a.end());
    int n=a.size();
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            mp[a[i]+a[j]].push_back({i,j});
        }
    }
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            int s=B-(a[i]+a[j]);
            if(mp.count(s))
            {
                for(auto it: mp[s])
                {
                       pair<int,int> p1=it;
                       pair<int,int> p2={i,j};
                
                    
                         vector<int> nw{a[p1.ft],a[p1.sc],a[p2.ft],a[p2.sc]};
                         sort(nw.begin(),nw.end());
                         vector<int> nwi{p1.ft,p1.sc,p2.ft,p2.sc};
                         sort(nwi.begin(),nwi.end());
                         int fl=0;
                         for(int i=0;i<3;i++)
                         {
                             if(nwi[i]==nwi[i+1]) fl=1;
                         }
                         if(fl==0)
                         man[nw]++;

                }
            }
        }
        
    }
    for(auto i: man)
    {
        ans.push_back(i.ft);
    }
    
        return ans;
}

*/