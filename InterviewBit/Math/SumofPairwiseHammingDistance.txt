//O(n)----> 32*n
#include <bits/stdc++.h>
int Solution::hammingDistance(const vector<int> &A) {
    long ans = 0; 
    for (long i = 0; i < 32; i++) {
        long count = 0;
        for (int j = 0; j < A.size(); j++)
            if ((A[j] & (1 << i)))
                count++;
        ans += (count * (A.size() - count) * 2);
    }
 
    return int(ans%1000000007);
}


/*  O(n^2)
int give(long long a){
    int count=0;
    while(a>0){
        count+=a%2;
        a/=2;
    }
    return count;
}

int Solution::hammingDistance(const vector<int> &A) {
    if(A.size()==0 || A.size()==1) return 0;
    long long sum=0;
    for(int i=0;i<A.size()-1;i++ ){
        for(int j=i+1;j<A.size();j++)
            sum+=give(A[i]^A[j]);
    }
    sum*=2;
    return int(sum%1000000007);
  
}
*/


/* o(n^2) using stl

#include <bits/stdc++.h>
int Solution::hammingDistance(const vector<int> &A) 
{
    int n = A.size();
    int ans = 0;
 
    for (long long i = 0; i < n - 1; i++) {
        for (int j = i; j < n; j++) {
            long long x = A[i] ^ A[j];
            bitset<32> b1(x);
            int count = b1.count();
            ans = ans + (2 * count);
        }
    }
    return int(ans%1000000007);
}
*/