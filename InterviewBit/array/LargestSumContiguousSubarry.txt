int Solution::maxSubArray(const vector<int> &A) {
    vector<int> ss;
    int sum=0;
    if(A.size()==1)
        return A[0];
    for(int i=0;i<A.size();i++){
        sum+=A[i];
        ss.push_back(sum);
    }
    
    int mxs=INT_MIN;
    for(int i=0;i<A.size()-1;i++)
        mxs=max(ss[i],mxs);
    for(int i=0;i<A.size();i++){
        for(int j=i;j<A.size();j++){
            mxs=max((ss[j]-ss[i]),mxs);
        }
    }
    return mxs;
}
/*
(i.e KADANE'S ALGO:
Initialize:
    max_sum = INT_MIN
    cur_sum = 0
For all a[i]
(1)cur_sum = cur_sum + a[i]
  	(2) max_sum=max(cur_sum,max_sum)
  	(3) if(cur_sum < 0)
            	cur_sum= 0
return max_sum)

*/