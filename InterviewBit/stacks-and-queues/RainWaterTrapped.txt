int Solution::trap(const vector<int> &A) {
    int n=A.size();
    vector<int> maxinleft(n,0);
    vector<int> maxinright(n,0);
    int l=A[0],r=A[n-1];
    for(int i=0;i<n;i++){
        l=max(A[i],l);
        maxinleft[i]=l;
    }
    for(int i=n-1;i>=0;i--){
        r=max(A[i],r);
        maxinright[i]=r;
    }
    int res=0;
    for(int i=0;i<n-1;i++){
        int h=min(maxinleft[i],maxinright[i]);
        res+=(h-A[i]);
    }
    return res;
}


/*
class Solution {
    public:
        int trap(int A[], int n) {
            int left = 0; int right = n - 1;
            int res = 0;
            int maxleft = 0, maxright = 0;
            while(left <= right){
                if(A[left] <= A[right]){
                    if(A[left] >= maxleft) maxleft = A[left];
                    else res += maxleft-A[left];
                    left++;
                }
                else{
                    if(A[right] >= maxright) maxright = A[right];
                    else res += maxright - A[right];
                    right--;
                }
            }
            return res;
        }
};

*/