/*
vector<int> Solution::slidingMaximum(const vector<int> &A, int B) {
    queue<pair<int,int>> q1;
    vector<int> res;
    if(B==1 || A.size()==0)
        return A;
    for(int i=0;i<=A.size()-B;i++){
        if(q1.size() && q1.front().second!=i &&A[i]>=q1.front().first){
            while(q1.size())
                    q1.pop();
        }
        if(q1.front().second!=i)
            q1.push(make_pair(A[i],i));
        
        for(int j=i+1;j<i+B && j<A.size();j++){
            if(q1.size() && A[j]>q1.front().first){
                while(q1.size())
                    q1.pop();
            }
            q1.push(make_pair(A[j],j));
        }
        res.push_back(q1.front().first);
        while(q1.front().second<=i)
            q1.pop();
    }
    return res;
}
*/
vector<int> Solution::slidingMaximum(const vector<int> &A, int B) {
    deque<pair<int,int>> w;
    vector<int> res;
    if(B==1 || A.size()==0)
        return A;
    for(int i=0 ; i<A.size();i++){
    	while(!w.empty() && w.back().first <=A[i])
    		w.pop_back();
    	
    	w.push_back(make_pair(A[i],i));
    	while(w.front().second <= i-B)
    	    w.pop_front();
    	    
    	if(i>=B-i && i>=B-1)
    	    res.push_back(w.front().first);
    }
    return res;
}